script "lib_HkeyArray"
--> MetaData
-
license: GPLv3
name: lib_HkeyArray
type: script library
version: 0.3


/*
This library is for processing associative arrays of hkeys linking to hKeys.
These arrays are know as linkArrays or in the context of hKeys hkeyArrays.

This library processes hkeyArrays.
*/

--> Working on
-
function hkeyArray_CollectScript hkeyArray, pNotHkeyObject
   put array_List (hkeyArray) into hKeys
   --
   if pNotHkeyObject is not empty then
      hkeyLine_Deconstruct pNotHkeyObject, hName, hType, hObject
      put hkeyIndex_FilterOutside (hKeys, hObject, true) into hKeys
   end if
   --
   hkeyIndex_Sort hKeys
   put hkeyIndex_CollectScript (hKeys) into hkeyScript
   return hkeyScript
end hkeyArray_CollectScript


--> HkeyArray | Delete
-
function hkeyArray_DeleteSubArray hKey, hkeyArray, pNotThisNode
   put hkeyArray_ParentKeyArray (hKeyArray) into parentKeyArray
   put hkeyArray_ExtractSubArray (hKey, hKeyArray) into subArray
   
   repeat for each key subKey in subArray
      put subArray [subKey] into subKeyArray
      repeat for each key subLeaf in subKeyArray
         delete variable hkeyArray [subKey][subLeaf]
      end repeat
      
      # Leave top node = pNotThisNode 
      if subKey = pNotThisNode then next repeat
      
      # How many parents?
      delete variable parentKeyArray [subKey]
      put parentKeyArray [subKey] into subKeyParentArray
      
      # Delete node if there are no parents
      -- if hkeyArray [subKey] is empty then
      if subKeyParentArray is empty then
         delete variable hkeyArray [subKey]
      else
         breakpoint -- more than one parent
      end if
   end repeat
   return hkeyArray
end hkeyArray_DeleteSubArray

command hKeyArray_DeleteHandler @hKeyLinkArray, handlerName, handlerType
   -- deletes named nodes
   -- and named nodes in links
   local alreadyDeleted
   repeat for each key hKey in hKeyLinkArray
      put hKeyLinkArray [hKey] into subKeys
      
      put hKey_IsHandler(hKey, handlerName, handlerType) into isNamedHandler
      if isNamedHandler then
         linkArray_DeleteBranch hKeyLinkArray, hKey, alreadyDeleted
      end if
      
      put empty into goodSubKeys
      repeat for each line subKey in subKeys
         if hKey_IsHandler(subKey, handlerName, handlerType) is false then
            put subKey & CR after goodSubKeys
         end if
      end repeat
      delete char -1 of goodSubKeys
      
      -- if goodSubKeys is empty then
      -- in case
      -- delete local hKeyLinkArray [hKey]
      if isNamedHandler is false then
         put goodSubKeys into hKeyLinkArray [hKey]
      end if
   end repeat
end hKeyArray_DeleteHandler


--> Move or Rename
-
function objectHkeyArray_FromKeys hKeys
   repeat for each line hKey in hKeys
      put word 4 to -1 hKey into sObject
      put empty into objectHkeyArray [sObject][hKey]
   end repeat
   return objectHkeyArray
end objectHkeyArray_FromKeys


--> Props
-
getprop hKeyArray_ConstructNodeSection [hKey]
   put the long id of the target into graphController
   
   put hkey_FetchOverlayData (hKey) into graphData
   linkArray_DeconstructGraphData graphData, hLinkArray, hIdLinkArray, hIdArray, reversedIdArray
   put graphData ["geometry"] into geometryArray
   
   put the node_TypeArray of graphController into nodeTypeArray
   put hKeyArray_ConstructNodeSection (hIdArray, hLinkArray, graphController, nodeTypeArray) into nodeSection
   return nodeSection
end hKeyArray_ConstructNodeSection


--> HkeyAray
-
function hkeyArray_StopsAtStart hkeyArray, pStartsWith
   if pStartsWith is empty then put "display_" into pStartsWith
   
   repeat for each key pKey in hkeyArray
      put hkey_StartsWith (pKey, pStartsWith, "C,M") into isDisplay
      if isDisplay then 
         -- delete variable hkeyArray [pKey]
         put empty into hkeyArray [pKey]
      else
         put hkeyArray [pKey] into subArray
         --
         repeat for each key sKey in subArray
            put hkey_StartsWith (pKey, pStartsWith, "C,M") into isDisplay
            if isDisplay then
               delete variable hkeyArray [pKey][sKey]
            end if
         end repeat
         
         if subArray [pKey] is empty then
            -- delete variable hkeyArray [pKey]
         end if
      end if
   end repeat
   return hkeyArray
end hkeyArray_StopsAtStart

function hkeyArray_ListParentKeys hKey, hKeyArray
   put hkeyArray_ParentKeyArray (hKeyArray) into parentKeyArray
   put parentKeyArray [hKey] into parentArray
   return keys (parentArray)
end hkeyArray_ListParentKeys

function hkeyArray_ParentKeyArray hKeyArray
   put the keys of hKeyArray into parentKeys
   --
   repeat for each key parentKey in hKeyArray
      put hKeyArray [parentKey] into childKeyArray
      repeat for each key childKey in childKeyArray
         if childKey is among the lines of parentKeys then
            put true into parentKeyArray [childKey][parentKey]
         end if
      end repeat
   end repeat
   return parentKeyArray
end hkeyArray_ParentKeyArray

function hkeyArray_ExtractExternalHkeys externalHkeyArray
   -- not used
   breakpoint
   repeat for each key shortExternalCall in externalHkeyArray
      put externalHkeyArray [shortExternalCall] into callArray
      put line 1 of keys (callArray) into parentKey
      put callArray [parentKey] into externalHkey
      put externalHkey & CR after externalHkeys
   end repeat
   delete char -1 of externalHkeys
   return externalHkeys
end hkeyArray_ExtractExternalHkeys

command hkeyArray_FilterOutExternalObjects @hKeyArray, scriptObject, pIncludeSecondGen
   breakpoint
   -- does not work ???
   -- think this may be as simple as only taking firstkeys! (ie no need to recurse and check :)
   local filteredLinkArray
   put keys (hKeyArray) into firstKeys
   repeat for each line firstKey in firstKeys
      hkey_Deconstruct firstKey, handlerName, firstType, firstScriptObject, firstNum
      if exists(firstScriptObject) is not true then next repeat
      if the long id of firstScriptObject = the long id of scriptObject then
         recurse_FilterOutExternalObjects firstKey, hKeyArray, scriptObject, filteredLinkArray, pIncludeSecondGen
      end if
   end repeat
   put filteredLinkArray into hKeyArray
end hkeyArray_FilterOutExternalObjects


--> HkeyArray | Construct
-
function hKeyArray_ConstructNodeSection hIdArray, hLinkArray, pGraphController, pNodeTypeArray
   repeat for each key handlerType in pNodeTypeArray
      put pNodeTypeArray [handlerType] into nodeIDs
      if nodeIDs is not empty then
         put hKeyArray_ConstructSubGraph (nodeIDs, hIdArray, handlerType, pGraphController) & CR after colourDefs
      end if
   end repeat
   
   -- node defs
   put hKeyArray_DotNestedObjectClusters (hIdArray, hLinkArray) into clusterDefs  -- specific (construct object clusters)
   put colourDefs & CR & CR & clusterDefs into defSection
   
   -- node links
   put linkArray_DotNodeLinks (hLinkArray, empty) into linkSection
   if defSection is empty then
      return linkSection
   else
      return defSection & CR & CR & linkSection
   end if
end hKeyArray_ConstructNodeSection

function hkeyArray_ShortToLong hkeyShortArray, pSearchObjects
   -- could be something else as a default?
   if pSearchObjects is empty then put stack_ListUsed() into pSearchObjects
   --
   repeat for each key hkey in hkeyShortArray
      put hkeyShortArray [hkey] into shortHkeyLine
      --
      put hkey_PublicFind (shortHkeyLine, pSearchObjects) into externalHkey
      if externalHkey is empty then
         put shortHkeyLine into hKeyArray [hkey]
      else
         put externalHkey into hKeyArray [hkey]
      end if
      --
   end repeat
   return hKeyArray
end hkeyArray_ShortToLong


--> HkeyArray | Parents
-
function hkeyArray_ExtractParentKeys hKey, hKeyArray
   hkey_Normalize hKey
   put the result into shortHkey
   --
   repeat for each key parentKey in hKeyArray
      put hKeyArray [parentKey] into childKeys
      repeat for each line childKey in childKeys
         hkey_Normalize childKey
         put the result into shortChildKey
         if shortChildKey = shortHkey then
            hkey_Normalize parentKey
            put parentKey & CR after parentKeys
         end if
      end repeat
   end repeat
   delete char -1 of parentKeys
   return parentKeys
end hkeyArray_ExtractParentKeys

function hkeyArray_ExtractParentArray hKey, hkeyArray
   local parentArray
   hkeyArray_ConstructParentArray hKey, hkeyArray, parentArray
   return parentArray
end hkeyArray_ExtractParentArray

command hkeyArray_ConstructParentArray hKey, hkeyArray, @parentArray
   breapoint
   set the wholematches to true
   repeat for each key maybeParentKey in hkeyArray 
      put hkeyArray [maybeParentKey] into childKeys
      if hKey is among the lines of childKeys then
         -- beware circular recursion (has hKey already been indexed?)
         if maybeParentKey is among the keys of parentArray then
            next repeat
         end if
         
         array_AddToIndex hKey, maybeParentKey, parentArray
         hkeyArray_ConstructParentArray maybeParentKey, hkeyArray, parentArray
      end if
   end repeat
end hkeyArray_ConstructParentArray

function hkeyArray_ExtractParentHkeys hKey, hkeyArray
   repeat for each key parentHkey in hkeyArray
      put hkeyArray [parentHkey] into childHkeys
      if hKey is among the lines of childHkeys then
         put parentHkey & CR after parentHkeys
      end if
   end repeat
   delete char -1 of parentHkeys
   return parentHkeys
end hkeyArray_ExtractParentHkeys


--> hkeyArray | Object
-
function hkeyArray_ExtractObject someObject, hkeyArray
   -- extracts all hkeys for an existing object (does checks)
   local filteredHkeys
   
   set the wholematches to true
   repeat for each key hKey in hkeyArray
      set the cursor to busy
      hkey_Deconstruct hKey, handlerName, handlerType, handlerNum, scriptObject
      if exists (scriptObject) is false then
         -- skip "missing"
         next repeat
      else if the long id of someObject is the long id of scriptObject then
         line_Add hKey, filteredHkeys
      else
         put hkeyArray [hKey] into handlerCalls
         repeat for each line callKey in handlerCalls
            hkey_Deconstruct callKey, handlerName, handlerType, handlerNum, callObject
            if exists(callObject) is false then
               -- skip Missing
               next repeat
            else if the long id of someObject = the long id of callObject then
               line_Add callKey, filteredHkeys
            end if
         end repeat
      end if
   end repeat
   return filteredHkeys
end hkeyArray_ExtractObject

function hkeyArray_ExtractMissingArray hkeyArray, fllterSystem, filterCustomMissing
   -- complex logic (old needs checking)
   local filteredHkeyArray, noCallKeys
   
   set the wholematches to true
   repeat for each key hKey in hkeyArray
      set the cursor to busy
      
      hkey_Deconstruct hKey, handlerName, handlerType, handlerNum, scriptObject
      if exists (scriptObject) is false then
         if fllterSystem is true and handlerType is "m" then next repeat
         if filterCustomMissing is true and handlerType is among the items of "g,s" then next repeat
         line_Add hKey, noCallKeys
      else
         put hkeyArray [hKey] into handlerCalls
         repeat for each line callKey in handlerCalls
            hkey_Deconstruct callKey, handlerName, handlerType, handlerNum, callObject
            if exists (callObject) is false then
               if fllterSystem is true and handlerType is "m" then next repeat
               if filterCustomMissing is true and handlerType is among the items of "g,s" then next repeat
               indexArray_Add callKey, hKey, filteredHkeyArray
            end if
         end repeat
      end if
   end repeat
   
   put array_List (filteredHkeyArray) into missingKeys
   line_Delete missingKeys, noCallKeys
   if noCallKeys is not empty then
      put noCallKeys into filteredHkeyArray ["Missing Solo"]
   end if
   return filteredHkeyArray
end hkeyArray_ExtractMissingArray


--> HkeyArray | Object | Extract
-
function hkeyArray_ExtractObject someObject, hkeyArray
   -- extracts all hkeys for an existing object (does checks)
   local filteredHkeys
   
   set the wholematches to true
   repeat for each key hKey in hkeyArray
      set the cursor to busy
      hkey_Deconstruct hKey, handlerName, handlerType, handlerNum, scriptObject
      if exists (scriptObject) is false then
         -- skip "missing"
         next repeat
      else if the long id of someObject is the long id of scriptObject then
         line_Add hKey, filteredHkeys
      else
         put hkeyArray [hKey] into handlerCalls
         repeat for each line callKey in handlerCalls
            hkey_Deconstruct callKey, handlerName, handlerType, handlerNum, callObject
            if exists(callObject) is false then
               -- skip Missing
               next repeat
            else if the long id of someObject = the long id of callObject then
               line_Add callKey, filteredHkeys
            end if
         end repeat
      end if
   end repeat
   return filteredHkeys
end hkeyArray_ExtractObject


--> HkeyArray | Object | New
-
function hkeyArray_ExtractObjects hkeyLinkArray
   repeat for each key hKey in hkeyLinkArray
      hkey_Deconstruct hKey, handlerName, handlerType, scriptObject, handlerNum
      put hKey into dumpArray [scriptObject]
      
      put hkeyLinkArray [hKey] into linkedKeys
      repeat for each line linkedKey in linkedKeys
         hkey_Deconstruct linkedKey, handlerName, handlerType, scriptObject, handlerNum
         put hKey into dumpArray [scriptObject]
      end repeat
   end repeat
   
   put keys (dumpArray) into scriptObjects
   return scriptObjects
end hkeyArray_ExtractObjects

function hKeyArray_ObjectArray someObject, hKeyLinkArray
   local objectArray
   put the rugged_Id of someObject into someObject
   repeat for each key hKey in hKeyLinkArray  
      hkey_Deconstruct hKey, handlerName, handlerType, keyObject, handlerNum
      if exists(keyObject) is false then next repeat
      put hKeyLinkArray [hKey] into keyLinks
      
      put empty into insideObjectLinks
      repeat for each line hkeyLink in keyLinks
         if item 3 of hkeyLink = someObject then
            put hkeyLink & CR after insideObjectLinks
         end if
      end repeat
      delete char -1 of insideObjectLinks
      
      if insideObjectLinks is empty then
         if keyObject = someObject and hkey is not among the keys of objectArray then
            -- may be no internal links, but could be a link from outside
            put empty into objectArray [hKey]
         end if
      else if keyObject = someObject then
         put insideObjectLinks into objectArray [hKey]
      else
         repeat for each line insideObjectLink in insideObjectLinks
            if insideObjectLink is not among the keys of objectArray then
               -- may be no internal links, but could be a link from outside
               put empty into objectArray [insideObjectLink]
            end if
         end repeat
      end if
   end repeat
   return objectArray
end hKeyArray_ObjectArray


--> HkeyArray | Object | ?
-
function hkeyArray_TidyObjectArray hKeyArray
   -- was "hkeyArray_ConstructObjectTreeArray"
   put keys (hKeyArray) into sortedObjects
   sort sortedObjects
   
   repeat for each line sortedObject in sortedObjects
      put hKeyArray [sortedObject] into depHkeys
      if depHkeys is an array then put keys (depHkeys) into depHkeys
      sort depHkeys by item 1 of each
      
      put empty into depKeyArray
      repeat for each line depHkey in depHkeys
         hkey_Normalize depHkey
         put word 1 to 2 of depHkey into shortHkeyLine
         put empty into objectHkeyArray [sortedObject][shortHkeyLine]
      end repeat
      
      /*
      put objectHkeyArray [sortedObject] into objectArray
      put keys (objectArray) into shortHkeyLines
      sort shortHkeyLines by word 2 of each
      put shortHkeyLines into objectHkeyArray [sortedObject] 
      */
   end repeat
   return objectHkeyArray
end hkeyArray_TidyObjectArray

function hKeyArray_ExtractObjectArray someObject, hKeyLinkArray, pIncludeParents
   if pIncludeParents is true then
      put hKeyArray_ObjectAndParentArray (someObject, hKeyLinkArray) into objectArray
   else
      put hKeyArray_ObjectArray (someObject, hKeyLinkArray) into objectArray
   end if
   return objectArray
end hKeyArray_ExtractObjectArray


--> HkeyArray | Convert
-
function hkeyArray_ConstructLongArray hKey, shortHkeyArray, pExternalObjects
   local longHkeyArray
   hkey_Deconstruct hKey, hName, hType, hObject, hNum
   put hName,hType into shortHKey
   
   hkeyArray_ConstructLongSubArray shortHKey, hObject, shortHkeyArray, longHkeyArray, pExternalObjects
   return longHkeyArray
end hkeyArray_ConstructLongArray

command hkeyArray_ConstructLongSubArray shortHKey, hObject, shortHkeyArray, @longHkeyArray, pExternalObjects
   /*
   This is a better more readable format than the one generated by the simple walk.
   Hkeys without children are listed as keys, so you can see them.
   Also array_List (hkeyArray) = keys (hkeyArray) which makes things faster
   They shoudlgraph the same.
   */
   local longChildKeys
   
   put item 1 of shortHKey into callName
   put item 2 of shortHKey into callType
   
   put hkey_Construct (callName, callType, hObject, 1) into longHkey
   
   if longHkey is among the keys of longHkeyArray then
      -- already indexed (don't recurse)
      return empty
   end if
   
   put shortHkeyArray [shortHKey] into shortChildKeys
   put hkey_FindLongCalls (shortChildKey, hObject, pExternalObjects) into longChildKeys
   put longChildKeys into longHkeyArray [longHkey]
   
   -- now recurse
   repeat for each line childHkey in longChildKeys
      hkey_Deconstruct childHkey, childName, childType, childObject, childNum
      put childName,childType into shortChildKey
      hkeyArray_ConstructLongSubArray shortChildKey, childObject, shortHkeyArray, longHkeyArray, pSetName
   end repeat
end hkeyArray_ConstructLongSubArray


--> HkeyArray | Tree
-
function hKeyArray_ObjectAndParentArray someObject, hKeyLinkArray
   -- extracts all object hKeys and their parents outside the object.
   local objectArray
   put the rugged_Id of someObject into someObject
   repeat for each key hKey in hKeyLinkArray  
      hkey_Deconstruct hKey, handlerName, handlerType, keyObject, handlerNum
      if exists(keyObject) is false then next repeat
      put hKeyLinkArray [hKey] into keyLinks
      
      put empty into insideObjectLinks
      repeat for each line hkeyLink in keyLinks
         if item 3 of hkeyLink = someObject then
            put hkeyLink & CR after insideObjectLinks
         end if
      end repeat
      delete char -1 of insideObjectLinks
      
      if insideObjectLinks is empty then
         if keyObject = someObject and hkey is not among the keys of objectArray then
            -- may be no internal links, but could be a link from outside
            put empty into objectArray [hKey]
         end if
      else
         put insideObjectLinks into objectArray [hKey]
      end if
   end repeat
   return objectArray
end hKeyArray_ObjectAndParentArray


--> hkeyArray | Object | Delete
-
command hkeyArray_RemoveObjectLinks @hkeyArray, objectToRemove
   -- assumes all objects in hkeyArray are rugged ids
   -- may need to check long ids?
   put the rugged_ID of objectToRemove into objectToRemove
   
   put array_List (hkeyArray) into hkeysToStrip
   filter hkeysToStrip with ("*," & objectToRemove & ",*")
   
   local alreadyDeleted
   repeat for each line stripKey in hkeysToStrip
      linkArray_DeleteBranch hkeyArray, stripKey, alreadyDeleted
   end repeat
   put array_List (hkeyArray) into keysLeft
   return keysLeft
end hkeyArray_RemoveObjectLinks

private command hkeyArray_RemoveObjectLinksBit @hkeyArray, fromKey, objectToRemove
   put hkeyArray [fromKey] into toKeys
   repeat for each line toKey in toKeys
      hkey_Deconstruct toKey, toName, toType, toObject, toNum
      if exists (toObject) then
         if the long id of toObject is not objectToRemove then
            put toKey & CR after newToKeys
         end if
      end if
   end repeat
   delete char -1 of newToKeys
   put newToKeys into hkeyArray [fromKey]
end hkeyArray_RemoveObjectLinksBit


--> hkeyArray | Object | Replace
-
function hkeyArray_HandlerLinkToObjectLink someObject, hkeyArray
   set the wholematches to true
   repeat for each key hKey in hkeyArray
      set the cursor to busy
      hkey_Deconstruct hKey, handlerName, handlerType, handlerNum, scriptObject
      if exists(scriptObject) is false then
         if someObject is scriptObject then
            -- Missing
            put hkey_Construct ("Missing", handlerType, scriptObject, handlerNum) into generalKey
            put generalKey into hkeyArray [hKey]
            next repeat
         else
            next repeat
         end if
      end if
      
      if the long id of someObject = the long id of scriptObject then
         put hkey_Construct ("General", handlerType, scriptObject, handlerNum) into generalKey
         put generalKey into hkeyArray [hKey]
         next repeat
      end if
      
      put hkeyArray [hKey] into handlerCalls
      put empty into filteredCalls
      repeat for each line callKey in handlerCalls
         hkey_Deconstruct callKey, handlerName, handlerType, handlerNum, callObject
         if exists(callObject) is false then
            if someObject is callObject then
               -- Missing
               put hkey_Construct ("Missing", handlerType, callObject, handlerNum) into generalKey
               put generalKey & CR after filteredCalls
               next repeat
            else
               put callKey & CR after filteredCalls
               next repeat
            end if
         end if
         
         if the long id of callObject is not the long id of scriptObject then
            put hkey_Construct ("General", handlerType, callObject, handlerNum) into generalKey
            put generalKey & CR after filteredCalls
         end if
      end repeat
      delete last char of filteredCalls
      put filteredCalls into hkeyArray [hKey]
   end repeat
   return hkeyArray
end hkeyArray_HandlerLinkToObjectLink

command hkeyArray_ReplaceWithObject stackObject, @hkeyArray
   -- seems like an old version of "hkeyArray_HandlerLinkToObjectLink"???
   repeat for each key hKey in hkeyArray
      hkey_Deconstruct hKey, handlerName, handlerType, handlerNum, scriptObject
      
      put hkeyArray [hKey] into hKeyLinks
      put empty into newLinks
      repeat for each line hKeyLink in hKeyLinks
         hkey_Deconstruct hKeyLink, linkName, linkType, linkNum, linkObject
         if exists (linkObject) is false then
            line_Insert hKeyLink, newLinks
         else
            get the stack_Object of linkObject
            if it is stackObject then
               line_Insert hKeyLink, newLinks
            else if linkObject = scriptObject then
               -- actually anywhere in the path
               next repeat
            else
               line_Add linkObject, newLinks
            end if
         end if
      end repeat
      
      if exists(scriptObject) is false then
         put newLinks into hkeyArray [hKey]
      else
         get the stack_Object of scriptObject
         if it is stackObject then
            put newLinks into hkeyArray [hKey]
         else
            put newLinks into hkeyArray [scriptObject]
         end if
      end if
   end repeat
end hkeyArray_ReplaceWithObject


--> hkeyArray | Object | Filter
-
command hKeyArray_SetWithinObject @hKeyLinkArray, withinObject
   put the long id of withinObject into withinObject
   put "handlers" into withinObjectKey
   
   repeat for each key hKey in hKeyLinkArray
      put hKeyLinkArray [hKey] into keyLinks
      hkey_Deconstruct hKey, handlerName, handlerType, keyObject, handlerNum
      if exists(keyObject) is true then put the long id of keyObject into keyObject
      
      if keyObject contains withinObject then
         put withinObjectKey into fromKey -- keyObject is within withinObject
      else
         put hKey into fromKey
      end if
      
      -- lets work out new links
      put empty into newKeyLinks
      repeat for each line keyLink in keyLinks
         hkey_Deconstruct keyLink, handlerName, handlerType, keyLinkObject, handlerNum
         if exists(keyLinkObject) is true then put the long id of keyLinkObject into keyLinkObject
         
         if keyLinkObject contains withinObject then
            -- line_Add withinObjectKey, newKeyLinks
            -- put CR after newKeyLinks
         else
            put keyLink & CR after newKeyLinks
         end if
      end repeat
      put word 1 to -1 of newKeyLinks into newKeyLinks
      
      put newLinkArray [fromKey] into oldLinks
      line_Add oldLinks, newKeyLinks
      put newKeyLinks into newLinkArray [fromKey]
   end repeat
   put newLinkArray into hKeyLinkArray
end hKeyArray_SetWithinObject

function hKeyArray_InsideAndOut hKeyLinkArray, withinObject
   put the long id of withinObject into withinObject
   repeat for each key hKey in hKeyLinkArray
      hkey_Deconstruct hKey, handlerName, handlerType, keyObject, handlerNum
      if exists(keyObject) is false then
         put empty into insideOutArray ["missing"][hKey]
      else
         put the long id of keyObject into keyObject
         if keyObject contains withinObject then
            put empty into insideOutArray ["inside"][hKey]
         else
            put empty into insideOutArray ["outside"][hKey]
         end if
      end if
      
      -- lets work out new links
      put empty into newKeyLinks
      put hKeyLinkArray [hKey] into keyLinks
      repeat for each line keyLink in keyLinks
         hkey_Deconstruct keyLink, handlerName, handlerType, keyLinkObject, handlerNum
         if exists(keyLinkObject) is false then 
            put empty into insideOutArray ["missing"][keyLink]
            next repeat
         end if
         
         put the long id of keyLinkObject into keyLinkObject
         if keyLinkObject contains withinObject then
            put empty into insideOutArray ["inside"][keyLink]
         else
            put empty into insideOutArray ["outside"][keyLink]
         end if
      end repeat
   end repeat
   return insideOutArray
end hKeyArray_InsideAndOut

function hKeyArray_NodeIdsInObject someObject, hIdArray
   -- was "hKeyArray_NodeIdsInObject"
   if exists(someObject) then
      put the long id of someObject into objectTest
   else
      put someObject into objectTest
   end if
   repeat for each key hId in hIdArray
      put hIdArray [hID] into hKey
      hkey_Deconstruct hKey, handlerName, handlerType, scriptObject, handlerNum
      if exists(scriptObject) then
         put the long id of scriptObject into scriptTest
      else
         put scriptObject into scriptTest
      end if
      put scriptTest = objectTest into insideObject
      if insideObject is true then
         put hID & CR after hIDs
      end if
   end repeat
   delete char -1 of hIDs
   return hIDs
end hKeyArray_NodeIdsInObject


--> hkeyArray
-
function hkeyArray_ShortNodes hkeyArray
   local indexArray
   repeat for each key hKey in hkeyArray
      put item 1 to 2 of hKey into shortHkey
      put empty into indexArray [shortHkey]
      put hkeyArray [hKey] into childHkeys
      repeat for each line childHkey in childHkeys
         put item 1 to 2 of childHkey into shortHkey
         put empty into indexArray [shortHkey]
      end repeat
   end repeat
   return keys (indexArray)
end hkeyArray_ShortNodes


--> HkeyArray
-
function hkeyArray_DepSuite hkeyArray, scriptObject, pStripProps, pStripObjects, pNotifyMissing
   hkeyArray_ConstructDependencySuite hkeyArray, scriptObject, depSuite, pStripObjects, pStripProps, pNotifyMissing
   return depSuite
end hkeyArray_DepSuite


--> hKeyArray | Filter
-
command hKeyArray_FilterSystemMessages @hKeyLinkArray
   put rev_MessageNames() into revMessageNames
   put keys(hKeyLinkArray) into hKeys
   repeat for each line hKey in hKeys
      if item 1 of hKey is among the lines of revMessageNames then
         -- only delete end nodes not start nodes
         if item 4 of hKey is "Missing" then
            delete local hKeyLinkArray [hKey]
            next repeat
         end if
      end if
      
      put hKeyLinkArray [hKey] into subKeys
      put empty into goodSubKeys
      repeat for each line subKey in subKeys
         if item 1 of subKey is among the lines of revMessageNames then
            if item 4 of subKey is "missing" then
               next repeat
            end if
         end if
         put subKey & CR after goodSubKeys
      end repeat
      delete char -1 of goodSubKeys
      put goodSubKeys into hKeyLinkArray [hKey]
   end repeat
end hKeyArray_FilterSystemMessages

command hKeyArray_FilterCustomMissing @hKeyLinkArray
   repeat for each key hKey in hKeyLinkArray
      if hKey_IsMissingProperty(hKey) then
         delete local hKeyLinkArray [hKey]
      else
         put empty into goodSubKeys
         repeat for each line subKey in hKeyLinkArray [hKey]
            if hKey_IsMissingProperty(subKey) is false then
               put subKey & CR after goodSubKeys
            end if
         end repeat
         delete char -1 of goodSubKeys
         put goodSubKeys into hKeyLinkArray [hKey]
      end if
   end repeat
end hKeyArray_FilterCustomMissing

function hKeyArray_DotNodeLinks linkArray, pNodeIDs, pTargetObject
   -- this seems specific to scripts?
   -- put the graph_Model of the target  into graphModel
   
   if pNodeIDs is empty then put keys(linkArray) into pNodeIDs
   repeat for each line someKey in pNodeIDs
      put linkArray [someKey] into someLinks
      
      if exists (pTargetObject) then
         get the dot_NodeID [someKey] of pTargetObject
         if it is not empty then put it into someKey
      end if
      repeat for each line someLink in someLinks
         if exists (pTargetObject) then
            get the dot_NodeID [someLink] of pTargetObject
            if it is not empty then put it into someLink
         end if
         put someKey && "->" && someLink & ";" & CR after linkSection
      end repeat
   end repeat
   delete char -1 of linkSection
   return linkSection
end hKeyArray_DotNodeLinks


--> Hkey | Array | Not Tested
-
function hkeyArray_ExtractEventKeys hkeyArray
   put keys(hkeyArray) into hKeys
   put rev_MessageNames() into revMessageNames
   repeat for each line hKey in hKeys
      if item 1 of hKey is among the lines of revMessageNames then
         put hKey & CR after hKeys
      end if
   end repeat
   delete char -1 of hKeys
   return hKeys
end hkeyArray_ExtractEventKeys

command hkeyArray_StripNonLinked @hkeyArray, topKey
   -- should keep repeating / recursing
   put array_Reverse(hkeyArray) into reversedArray
   repeat for each key hKey in reversedArray
      if hKey = topKey then next repeat
      if reversedArray [hKey] is empty then
         linkArray_DeleteBranch hkeyArray, hKey
      end if
   end repeat
end hkeyArray_StripNonLinked

function hkeyArray_InternalLinks hkeyArray, targetObject
   set the wholematches to true
   repeat for each key hKey in hkeyArray
      set the cursor to busy
      hkey_Deconstruct hKey, handlerName, handlerType, handlerNum, scriptObject
      if exists(scriptObject) is false then
         next repeat
      end if
      
      if object_Contains(targetObject, scriptObject) is false then
         delete local hkeyArray [hKey]
      else
         put hkeyArray [hKey] into handlerCalls
         put empty into filteredCalls
         repeat for each line callKey in handlerCalls
            hkey_Deconstruct callKey, handlerName, handlerType, handlerNum, callObject
            if exists(callObject) is false then
               put callKey & CR after filteredCalls
               next repeat
            end if
            if object_Contains(targetObject, callObject) then
               put callKey & CR after filteredCalls
            end if
         end repeat
         delete last char of filteredCalls
         put filteredCalls into hkeyArray [hKey]
      end if
   end repeat
   return hkeyArray
end hkeyArray_InternalLinks

function hkeyArray_ExternalLinks hkeyArray, targetObject
   set the wholematches to true
   repeat for each key hKey in hkeyArray
      set the cursor to busy
      hkey_Deconstruct hKey, handlerName, handlerType, handlerNum, scriptObject
      if exists(scriptObject) is false then
         next repeat
      end if
      
      if object_Contains(targetObject, scriptObject) then
         delete local hkeyArray [hKey]
      else
         put hkeyArray [hKey] into handlerCalls
         put empty into filteredCalls
         repeat for each line callKey in handlerCalls
            hkey_Deconstruct callKey, handlerName, handlerType, handlerNum, callObject
            if exists(callObject) is false then
               next repeat
            end if
            if object_Contains(targetObject, callObject) then
               -- delete
            else
               put callKey & CR after filteredCalls
            end if
         end repeat
         delete last char of filteredCalls
         put filteredCalls into hkeyArray [hKey]
      end if
   end repeat
   return hkeyArray
end hkeyArray_ExternalLinks

function hkeyArray_ExtractCalls hkeyArray, hKeys
   -- do the hKey nodes that are in the object   (delete from array when done)
   put empty into hKeyCalls
   repeat for each line hKey in hKeys
      put hkeyArray [hKey] into firstHkeyCalls
      line_Delete hKeys, firstHkeyCalls
      line_Add firstHkeyCalls, hKeyCalls
      delete local hkeyArray [hKey] 
   end repeat
   
   -- now do the hKey nodes that were not in the object 
   repeat for each key hKey in hkeyArray
      line_Add hKey, hKeyCalls
      
      put hkeyArray [hKey] into firstHkeyCalls
      line_Delete hKeys, firstHkeyCalls
      line_Add firstHkeyCalls, hKeyCalls
   end repeat
   return hKeyCalls
end hkeyArray_ExtractCalls


--> Private
-
private command recurse_FilterOutExternalObjects hKey, hKeyArray, originalObject, @filteredLinkArray, pIncludeSecondGen
   set the cursor to busy
   hkey_Deconstruct hKey, handlerName, handlerType, scriptObject, handlerNum
   if exists(scriptObject) is true then
      if the long id of scriptObject = the long id of originalObject then
         -- allways add internal calls
         put hKeyArray [hKey] into hKeyChildren  
         put hKeyChildren into filteredLinkArray [hKey]
         repeat for each line hKeyChild in hKeyChildren
            if hkeyChild is among the keys of filteredLinkArray then
               next repeat
            end if
            recurse_FilterOutExternalObjects hKeyChild, hKeyArray, originalObject, filteredLinkArray, pIncludeSecondGen
         end repeat
      else
         -- hKey is outside of originalObject
         -- if it is first time => not added to filteredLinkArray (yet)
         -- if it is first level recursion => hKey has been already added as a child to filteredLinkArray
         -- don't recurse
         if pIncludeSecondGen is true then
            put hKeyArray [hKey] into externalChildren
            if externalChildren is not empty then
               put externalChildren into filteredLinkArray [hKey]
            end if
         end if
      end if
   else
      -- script object is missing
      -- put empty into filteredLinkArray [hKey]
   end if
end recurse_FilterOutExternalObjects


--> Deps
-
function array_List someArray
   -- unique index of all elements and keys in an array (not for nested arrays)
   local indexArray
   repeat for each key someKey in someArray
      put empty into indexArray [someKey]
      put someArray [someKey] into keyElements
      if keyElements is an array then
         repeat for each key keyElement in keyElements
            if word 1 to -1 of keyElement is empty then next repeat
            put empty into indexArray [keyElement]
         end repeat
      else if keyElements is not empty then
         repeat for each line keyElement in keyElements
            if word 1 to -1 of keyElement is empty then next repeat
            put empty into indexArray [keyElement]
         end repeat
      end if
   end repeat
   return keys (indexArray)
end array_List
