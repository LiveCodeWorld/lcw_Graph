script "lib_LinkArray"
--> MetaData
-
license: GPLv3
name: lib_LinkArray
type: script library
version: 0.2

/*
A linkArray is a particular array structure for stroing associative node => node arryas,
together with metadata specifying styling and structuring.

See also hkeyArray, and overlayArray for related structures.
*/


--> Working on
-

--> HkeyArray | Children
-
function hkeyArray_ChildKeyArray hKey, hKeyArray
   return hKeyArray [hKey]
end hkeyArray_ChildKeyArray

function hkeyArray_ExtractSubArray hKey, hkeyArray
   local subArray
   hkeyArray_ConstructSubArray hKey, hkeyArray, subArray
   -- linkArray_WalkKeys linkArray, hKey, subArray
   return subArray
end hkeyArray_ExtractSubArray

command hkeyArray_ConstructSubArray hKey, hkeyArray, @subArray
   -- see also "linkArray_WalkKeys"
   put hkeyArray [hKey] into childKeyArray
   if childKeyArray is empty then return hkeyArray
   --
   put childKeyArray into subArray [hKey]
   repeat for each key childKey in childKeyArray
      if childKey is among the keys of subArray then
         next repeat -- a recursive hKey that is already added to subArray
      end if
      hkeyArray_ConstructSubArray childKey, hkeyArray, subArray
   end repeat
end hkeyArray_ConstructSubArray


--> LinkArray | Recursion
-
function linkArray_WalkBranch someKeys, linkArray
   -- was "linkArray_ExtractTreeArray"
   local subLinkArray
   repeat for each line someKey in someKeys
      linkArray_WalkKeys linkArray, someKey, subLinkArray
   end repeat
   return subLinkArray
end linkArray_WalkBranch

command linkArray_WalkKeys linkArray, someKey, @subLinkArray
   if someKey is among the keys of subLinkArray then
      return empty -- lets not recurse!
   end if
   
   put linkArray [someKey] into subKeys
   put subKeys into subLinkArray [someKey]
   repeat for each line subKey in subKeys
      linkArray_WalkKeys linkArray, subKey, subLinkArray
   end repeat  
end linkArray_WalkKeys

command linkArray_DeleteBranch @someArray, someKey, @alreadyDeleted
   -- Recusive command
   local childKey,childKeys,otherLinkingNodes,reversedArray
   local testKey
   
   # Recursion safety check to avoid infinite loops
   if someKey is among the lines of alreadyDeleted then return false
   put someKey & CR after alreadyDeleted
   
   # Delete the node someKey
   put someArray [someKey] into childKeys
   delete local someArray [someKey]
   
   # Delete any links to the deleted node from other nodes
   repeat for each key testKey in someArray
      array_DeleteFromIndex someKey, testKey, someArray
   end repeat
   
   # Delete any child nodes of the deleted node
   -- ie chop the branch off
   -- even if there are links from it
   -- but not if other nodes link to it
   put array_Reverse (someArray) into reversedArray
   
   repeat for each line childKey in childKeys
      # Work out what other nodes link TO the child
      put reversedArray [childKey] into otherLinkingNodes
      
      # Apart from someKey
      line_Delete someKey, otherLinkingNodes
      
      if otherLinkingNodes is empty then
         # Recursively delete node
         linkArray_DeleteBranch someArray, childKey, alreadyDeleted
      end if
   end repeat
   return true
end linkArray_DeleteBranch


--> LinkArray | Processing
-
command linkarray_ExtractRandomNodes @nodeIdArray, someNumber
   -- was "linkarray_ExtractRandomNodes"
   repeat someNumber
      if nodeIdArray is not an array then exit repeat
      put keys (nodeIdArray) into nodeKeys
      put the number of lines of nodeKeys into maxNum
      put random (maxNum) into lineNum
      put line lineNum of nodeKeys into nodeID
      put nodeID & comma after nodeIDs
      delete variable nodeIdArray [nodeID]
   end repeat
   delete char -1 of nodeIDs
   return nodeIDs
end linkarray_ExtractRandomNodes


--> LinkArray | Filter
-
function linkArray_ConstructObjectOutline hIdArray, hLinkArray
   if keys(hLinkArray) is not empty then put linkarray_FilterIdArray (hIdArray, hLinkArray) into hIdArray
   put hKeyArray_ConstructObjectIdArray(hIdArray) into objectIdArray
   put hKeyArray_ObjectOutline(hIdArray, hLinkArray) into objectOutline
   put object_ConstructPropertiesOutline (objectOutline, objectIdArray, hIdArray) into objectOutline
   return objectOutline
end linkArray_ConstructObjectOutline


--> LinkArray | Filter
-
function linkarray_HkeysFromIDs hIDs, hIdArray
   local hKeys
   repeat for each line hID in hIDs
      put hIdArray [hID] & CR after hKeys
   end repeat
   delete char -1 of hKeys
   return hKeys
end linkarray_HkeysFromIDs

function linkarray_FilterIdArray hIdArray, hLinkArray
   -- lets only get the bits of hIdArray that are actually in the link array
   put array_List (hLinkArray) into linkIds
   repeat for each line linkID in linkIds
      put hIdArray [linkID] into filteredArray [linkID]
   end repeat
   return filteredArray
end linkarray_FilterIdArray

function linkArray_Reduce linkArray, minLinkNum
   -- updated to allow nested linkArray
   put array_Reverse (linkArray) into backArray
   repeat for each key someKeyWord in linkArray
      put linkArray [someKeyWord] into frontLinks
      if frontLinks is an array then put keys (frontLinks) into frontLinks
      put backArray [someKeyWord] into backLinks
      if backLinks is an array then put keys (backLinks) into backLinks
      
      if the number of lines of frontLinks > minLinkNum or the number of lines of backLinks > minLinkNum then
         put someKeyWord & CR after goodKeys
      end if
   end repeat
   delete char -1 of goodKeys
   
   repeat for each line goodKey in goodKeys
      put empty into goodFrontLinks
      put linkArray [goodKey] into testLinks
      if testLinks is an array then put keys (testLinks) into testLinks
      
      repeat for each line testLink in testLinks
         if testLink is among the lines of goodKeys then
            put testLink & CR after goodFrontLinks
         end if
      end repeat 
      delete char -1 of goodFrontLinks
      put goodFrontLinks into reducedArray [goodKey]
   end repeat
   return reducedArray
end linkArray_Reduce

function linkArray_ConstructSkipArray linkArray
   -- array_ConstructSkipArray, array_KeytokeyArray
   -- links keys to other keys via their links
   -- skipping a generation  fo links
   -- to create a key-to-key array
   put array_Reverse (linkArray) into backArray
   repeat for each key someKeyWord in linkArray
      put linkArray [someKeyWord] into idLinks
      repeat for each line idLink in idLinks
         put backArray [idLink] into nextKeyWords
         
         put keyToKeyArray [someKeyWord] into keyKeyLinks
         line_Add nextKeyWords, keyKeyLinks
         line_Delete someKeyWord, keyKeyLinks
         put keyKeyLinks into keyToKeyArray [someKeyWord]
         
         /*
         put keyToKeyArray [someKeyWord]["keyword links"] into keyKeyLinks
         line_Add nextKeyWords, keyKeyLinks
         line_Delete someKeyWord, keyKeyLinks
         put keyKeyLinks into keyToKeyArray [someKeyWord]["keyword links"]
         */
      end repeat
   end repeat
   return keyToKeyArray
end linkArray_ConstructSkipArray

command linkArray_RecurseClusters nodeID, nodeTypeArray, @clusterSection
   put nodeTypeArray [nodeID] into sectionArray
   -- put keys(
end linkArray_RecurseClusters


--> LinkArray | DotText | Node Links
-
function linkArray_NodeIdsToHkeys nodeIDs
   put the linkArray_Model of me into modelObject
   linkArray_Get modelObject, hLinkArray, hIdArray
   
   repeat for each line nodeID in nodeIDs
      put hIdArray [nodeID] into hKey
      put hKey & CR after hKeys
   end repeat
   delete char -1 of hKeys
   return hKeys
end linkArray_NodeIdsToHkeys


--> LinkArray| Model | Convertion
-
function linkArray_ConstructOutline linkArray, hIdArray
   -- constructs a simple (reversable) outline from a link array
   -- different outlines are possible depending on the order of keys
   -- so sorting improves consistency
   
   put keys(linkArray) into linkKeys
   sort linkKeys
   repeat for each line keyID in linkKeys
      put hIdArray [keyID] into realKey
      put html_ConstructNameLink(realKey, keyID) & CR after someOutline
      
      put linkArray [keyID] into linkIDs
      put empty into realValues
      repeat for each line linkID in linkIDs
         put hIdArray [linkID] into realValue
         put tab & html_ConstructNameLink (realValue, linkID) & CR after someOutline
      end repeat
   end repeat
   delete char -1 of someOutline
   return someOutline
end linkArray_ConstructOutline

function linkArray_IdRevert linkArray, hIdArray
   repeat for each key keyID in linkArray
      put linkArray [keyID] into linkIDs
      put empty into realValues
      repeat for each line linkID in linkIDs
         put hIdArray [linkID] into realValue
         put realValue & CR after realValues
      end repeat
      delete char -1 of realValues
      
      put hIdArray [keyID] into realKey
      put realValues into realArray [realKey]
   end repeat
   return realArray
end linkArray_IdRevert

on linkArray_HashConstruct someArray, @hashedArray, @hashDictionary
   -- usefull to create simple arrays from complex data.
   -- references to complex data stored in hash key dictionary "hashDictionary"
   
   repeat for each key someKey in someArray
      put text_Hash (someKey) into hashKey
      put someKey into hashDictionary [hashKey]
      
      put someArray [someKey] into someValues
      
      put empty into hashValues
      repeat for each line someValue in someValues
         put text_Hash (someValue) into hashValue
         put someValue into hashDictionary [hashValue]
         put hashValue & CR after hashValues
      end repeat
      delete char -1 of hashValues
      put hashValues into hashedArray [hashKey]
   end repeat
end linkArray_HashConstruct

function linkArray_HashRevert hashedArray, hashDictionary
   repeat for each key hashKey in hashedArray
      put hashDictionary [hashKey] into realKey
      
      put hashedArray [hashKey] into hashValues
      
      put empty into realValues
      repeat for each line hashValue in hashValues
         put hashDictionary [hashValue] into realValue
         put realValue & CR after realValues
      end repeat
      delete char -1 of realValues
      put realValues into realArray [realKey]
   end repeat
   return realArray
end linkArray_HashRevert


--> LinkArray | Recursion | Experiments
-
on outline_RecurseToLinkArray tabbedOutline, someNode, @linkArray, @hIdArray, @backArray
   -- this recurses the outline properly
   -- and creates an abreviated array based on the node paths.
   
   -- not sure what its use is / if this makes a sensible array for muli-level outlines?
   -- so changed it to using paths instead of short names as the key to linkArray
   -- for a two level linkArray this is equivalent
   
   set the itemdelimiter to "/"
   put item -1 of someNode into nodeName
   put outline_PathOffset(someNode, tabbedOutline) into startOsLineNum
   put outline_GetChildren(startOsLineNum, tabbedOutline) into childNames
   
   linkArray_Add childNames, someNode, linkArray, hIdArray, backArray
   if someNode is empty then
      put empty into someStem
   else
      put someNode & "/" into someStem
   end if
   
   repeat for each line childName in childNames
      put someStem & childName into childNode
      outline_RecurseToLinkArray tabbedOutline, childNode, linkArray, hIdArray, backArray
   end repeat
end outline_RecurseToLinkArray

function linkArray_Xml linkArray, propertyArray
   breakpoint
   -- now use "outline_ToXmlStructure()"
   
   put "array" into rootNode
   xml_CreateTree rootNode, treeID
   
   repeat for each key someKey in linkArray
      put someKey into tagName
      xml_NormalizeTagName tagName
      
      put rootNode & "/" & tagName into firstLevelNode
      linkArray_ConstructXml firstLevelNode, linkArray, treeID, propertyArray
   end repeat
   put revXMLText(treeID, "", true) into someXml
   revXMLDeleteTree treeID
   return someXml
end linkArray_Xml

on linkArray_ConstructXml someNode, linkArray, treeID, @propertyArray
   breakpoint
   -- now use "outline_ToXmlStructure()"
   -- a recursive function
   -- more complex than it needs to be to allow outlines with dodgy xml tag names such as numbers
   
   -- add someNode to XML
   set the itemdelimiter to "/"
   put item -1 of someNode into tagName
   put item 1 to -2 of someNode into parentNode
   
   put revXMLRootNode(treeID) into rootNode
   put tagName into someKey
   xml_UnNormalizeTagName someKey
   
   if propertyArray [someKey,"indexedFlag"] = true then return false
   put true into propertyArray [someKey,"indexedFlag"]
   
   if tagName = rootNode then
      -- dont index
      -- do a header?
   else
      put propertyArray [someKey] into nodeContents
      put "" into nodeContents
      -- breakpoint
      revAddXMLNode treeID, parentNode, tagName, nodeContents
      
      -- lets add XML not content so it can be pretty indented and then replaced
      put the result into createdNode
      revAddXMLNode treeID, createdNode, "contents", nodeContents
      put the result into attributeNode
      revSetXMLAttribute treeID, attributeNode, "nodeID", tagName
      
   end if
   
   put linkArray [someKey] into childKeys
   repeat for each line childKey in childKeys
      put childKey into childName
      xml_NormalizeTagName childName
      put someNode & "/" & childName into childNode
      
      if propertyArray [childKey,"indexedFlag"] = true then
         -- do not recurse array node as it has already been indexed
         
         -- add child here as it will not be added by recursing!
         put propertyArray [someKey] into nodeContents
         revAddXMLNode treeID, someNode, childName, nodeContents
         next repeat
      else
         -- put indexedFlag into propertyArray [childKey]
         linkArray_ConstructXml childNode, linkArray, treeID, propertyArray
      end if
   end repeat  
end linkArray_ConstructXml


--> Private
-
private command line_DeleteIndex @someIndex, pStripIndex
   /*
   split someIndex by CR as set
   split pStripIndex by CR as set
   difference someIndex with pStripIndex
   put keys (someIndex) into uniqueIndex
   return uniqueIndex
   */
   
   repeat for each line someLine in pStripIndex
      line_Delete someLine, someIndex
      if lineNum = 0 then
         put lineNum & comma after deletedLines
      end if
   end repeat
   delete char -1 of deletedLines
   return deletedLines
end line_DeleteIndex

private command line_Delete someLine, @someIndex
   set the wholematches to true
   put lineoffset (someLine, someIndex) into lineNum
   delete line lineNum of someIndex
   return lineNum
end line_Delete

private command _ConstructPropertyArray pDotPropertyArray, @overlap, @concentrate, @splines, @cluster, @direction, @dotOrder, @defaultShape, @defaultUrl
   -- see also dot_ConstructPropertyArray
   put pDotPropertyArray ["graphRect"] into graphRect
   delete local pDotPropertyArray ["graphRect"] 
   
   put pDotPropertyArray ["overlap"] into overlap
   delete local pDotPropertyArray ["overlap"] 
   
   put pDotPropertyArray ["concentrate"] into concentrate
   delete local pDotPropertyArray ["concentrate"] 
   
   put pDotPropertyArray ["splines"] into splines
   delete local pDotPropertyArray ["splines"] 
   
   put pDotPropertyArray ["cluster"] into cluster
   delete local pDotPropertyArray ["cluster"] 
   
   put pDotPropertyArray ["direction"] into direction
   delete local pDotPropertyArray ["direction"] 
   
   put pDotPropertyArray ["dotOrder"] into dotOrder
   delete local pDotPropertyArray ["dotOrder"] 
   
   put pDotPropertyArray ["defaultShape"] into defaultShape
   delete local pDotPropertyArray ["defaultShape"] 
   if defaultShape = "none" then put empty into defaultShape
   
   put pDotPropertyArray ["defaultUrl"] into defaultUrl
   delete local pDotPropertyArray ["defaultUrl"]
   return pDotPropertyArray
end _ConstructPropertyArray


--> Deps
-
on xml_NormalizeTagName @tagName
   -- xml tag names should not start with a number
   if char 1 of tagName is a number then
      put "node_" & tagName into tagName
   else
      put wiki_ConstructID(tagName) into tagName
   end if
end xml_NormalizeTagName

on xml_UnNormalizeTagName @tagName
   if char 1 to 5 of tagName = "node_" then
      delete char 1 to 5 of tagName
   end if
end xml_UnNormalizeTagName
